#!/usr/bin/env python3
"""
Quick Tutorial Translations - High Priority Entries
===================================================
Translate the most important tutorial kanji/kana markup patterns
"""

# High-priority kanji/kana translations based on card game terminology
TUTORIAL_TRANSLATIONS = {
    # Game terminology
    "<|Ëâ≤„ÄÖÊïô|„ÅÑ„Çç„ÅÑ„Çç„Åä„Åó|>": "teach various things",
    "<|‰∏ãÁîªÈù¢|„Åó„Åü„Åå„ÇÅ„Çì|>": "bottom screen", 
    "<|ÈÄÄÂç¥|„Åü„ÅÑ„Åç„ÇÉ„Åè|>": "retreat",
    "<|Ë™¨Êòé|„Åõ„Å§„ÇÅ„ÅÑ|>": "explanation",
    "<|ÊîªÊíÉ|„Åì„ÅÜ„Åí„Åç|>": "attack",
    "<|Èò≤Âæ°|„Åº„ÅÜ„Åé„Çá|>": "defense",
    "<|Êã°Â§ß|„Åã„Åè„Å†„ÅÑ|>": "enlarge",
    "<|‰∏ÄÁ∑í|„ÅÑ„Å£„Åó„Çá|>": "together",
    "<|ÂàÜË∫´|„Å∂„Çì„Åó„Çì|>": "clone",
    "<|Â±±Êú≠|„ÇÑ„Åæ„Åµ„Å†|>": "deck",
    "<|ÊûöÊï∞|„Åæ„ÅÑ„Åô„ÅÜ|>": "number of cards",
    "<|Ê≥®ÊÑè|„Å°„ÇÖ„ÅÜ„ÅÑ|>": "attention",
    "<|ÁâπÂà•|„Å®„Åè„Åπ„Å§|>": "special",
    "<|ÊúÄÂ§ß|„Åï„ÅÑ„Å†„ÅÑ|>": "maximum",
    "<|Êï∞Â≠ó|„Åô„ÅÜ„Åò|>": "number",
    "<|ÊâãÊú≠|„Å¶„Åµ„Å†|>": "hand",
    "<|Â†¥ÊâÄ|„Å∞„Åó„Çá|>": "location",
    "<|ÊúÄÂæå|„Åï„ÅÑ„Åî|>": "last",
    "<|ÊúâÂà©|„ÇÜ„ÅÜ„Çä|>": "advantage",
    "<|ÁîªÂÉè|„Åå„Åû„ÅÜ|>": "image",
    
    # Additional common terms (from pattern analysis)
    "<|Ê¨°|„Å§„Åé|>": "next",
    "<|Êïô|„Åä„Åó|>": "teach",
    "<|‰ªñ|„Åª„Åã|>": "other",
    "<|ÁΩÆ|„Åä|>": "place",
    "<|Ë®Ä|„ÅÑ|>": "say",
    "<|Êùü|„Åü|>": "bundle",
}

def create_translated_csv():
    """Create a translated version of the tutorial CSV"""
    import csv
    
    # Read the original extraction
    input_file = "tutorial_translation_ready.csv"
    output_file = "tutorial_translated_ready.csv"
    
    translated_entries = []
    
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f, delimiter=';')
            
            for row in reader:
                japanese_text = row['japanese_text']
                
                # Check if we have a direct translation
                if japanese_text in TUTORIAL_TRANSLATIONS:
                    row['english_translation'] = TUTORIAL_TRANSLATIONS[japanese_text]
                    row['notes'] = 'Direct translation - ready for injection'
                elif row['type'] == 'kanji_kana_markup':
                    row['english_translation'] = '[NEEDS TRANSLATION]'
                    row['notes'] = 'High priority kanji/kana markup'
                else:
                    row['english_translation'] = '[NEEDS TRANSLATION]'
                    row['notes'] = 'Context sentence or text segment'
                
                translated_entries.append(row)
        
        # Write translated version
        with open(output_file, 'w', newline='', encoding='utf-8') as f:
            if translated_entries:
                fieldnames = translated_entries[0].keys()
                writer = csv.DictWriter(f, fieldnames=fieldnames, delimiter=';')
                writer.writeheader()
                writer.writerows(translated_entries)
        
        print(f"‚úÖ Created translated CSV: {output_file}")
        
        # Count translations
        translated_count = sum(1 for entry in translated_entries 
                             if entry['english_translation'] not in ['', '[NEEDS TRANSLATION]'])
        
        print(f"üìä Translation Status:")
        print(f"   Total entries: {len(translated_entries)}")
        print(f"   Translated: {translated_count}")
        print(f"   Remaining: {len(translated_entries) - translated_count}")
        
        return translated_entries, translated_count
        
    except FileNotFoundError:
        print(f"‚ùå Could not find {input_file}")
        print("   Please run extract_tutorial_text.py first")
        return [], 0

def create_injection_test_file():
    """Create a small test file with just the translated entries"""
    import csv
    
    # Read translated entries
    try:
        with open("tutorial_translated_ready.csv", 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f, delimiter=';')
            entries = list(reader)
        
        # Filter to only translated entries
        translated_entries = [entry for entry in entries 
                            if entry['english_translation'] not in ['', '[NEEDS TRANSLATION]']]
        
        # Create injection test file
        test_file = "tutorial_injection_test.csv"
        with open(test_file, 'w', newline='', encoding='utf-8') as f:
            fieldnames = ['id', 'offset', 'japanese_text', 'english_translation', 'priority']
            writer = csv.DictWriter(f, fieldnames=fieldnames, delimiter=';')
            writer.writeheader()
            
            for entry in translated_entries[:10]:  # Top 10 for testing
                writer.writerow({
                    'id': entry['id'],
                    'offset': entry['offset'],
                    'japanese_text': entry['japanese_text'],
                    'english_translation': entry['english_translation'],
                    'priority': entry['priority']
                })
        
        print(f"‚úÖ Created injection test file: {test_file}")
        print(f"   Contains {len(translated_entries[:10])} entries ready for testing")
        
        return translated_entries[:10]
        
    except FileNotFoundError:
        print("‚ùå Could not find translated CSV file")
        return []

def show_translation_examples():
    """Show examples of the translations"""
    print("\nüéØ TRANSLATION EXAMPLES:")
    print("=" * 50)
    
    examples = [
        ("<|Â±±Êú≠|„ÇÑ„Åæ„Åµ„Å†|>", "deck", "The deck of cards"),
        ("<|ÊâãÊú≠|„Å¶„Åµ„Å†|>", "hand", "Cards in hand"),
        ("<|ÊîªÊíÉ|„Åì„ÅÜ„Åí„Åç|>", "attack", "Attack action"),
        ("<|Èò≤Âæ°|„Åº„ÅÜ„Åé„Çá|>", "defense", "Defense action"),
        ("<|Ë™¨Êòé|„Åõ„Å§„ÇÅ„ÅÑ|>", "explanation", "Tutorial explanation"),
    ]
    
    for japanese, english, context in examples:
        print(f"Japanese: {japanese}")
        print(f"English:  {english}")
        print(f"Context:  {context}")
        print()

def main():
    print("üéì CF VANGUARD TUTORIAL QUICK TRANSLATIONS")
    print("=" * 55)
    
    # Create translated CSV
    entries, translated_count = create_translated_csv()
    
    if translated_count > 0:
        print(f"\n‚úÖ SUCCESS: {translated_count} entries translated!")
        
        # Create injection test file
        test_entries = create_injection_test_file()
        
        # Show examples
        show_translation_examples()
        
        print("üöÄ READY FOR INJECTION TESTING!")
        print("=" * 40)
        print("Next steps:")
        print("1. Review tutorial_translated_ready.csv")
        print("2. Test injection with tutorial_injection_test.csv")
        print("3. Use extract_rtz_content.py for injection")
        print("4. Validate translations in-game")
        
        print(f"\nüéÆ IMMEDIATE TESTING CANDIDATES:")
        for entry in test_entries[:5]:
            print(f"   {entry['japanese_text']} ‚Üí {entry['english_translation']}")
    
    else:
        print("‚ùå No translations created. Check if tutorial_translation_ready.csv exists.")

if __name__ == "__main__":
    main()